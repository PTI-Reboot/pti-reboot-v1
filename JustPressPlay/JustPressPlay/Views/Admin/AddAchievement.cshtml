@{
    ViewBag.Title = "AddAchievement";
}
@model JustPressPlay.ViewModels.AddAchievementViewModel

<div id="adminBody">

    <div class="row wide">

        <div class="large-3 columns">

            @{ Html.RenderPartial("_AdminNavigation"); }

        </div>

        <div class="large-9 columns">

            <div class="panel">
                <h2>AddAchievement</h2>
            </div>

            <div class="panel">
                @using (Html.BeginForm("AddAchievement", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", id = "parentForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()

                    <fieldset>
                        <legend>Create Achievement Form</legend>
                        <ol>
                            <li>
                                @Html.LabelFor(m => m.Title)
                                @Html.TextBoxFor(m=> m.Title)
                                @Html.ValidationMessageFor(m => m.Title)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.Description)
                                @Html.TextAreaFor(m => m.Description)
                                @Html.ValidationMessageFor(m => m.Description)
                            </li>
                            @for (int i = 0; i < 7; i++)
                            {
                                <li>
                                    @Html.LabelFor(m => m.RequirementsList[i])
                                    @Html.TextBoxFor(m => m.RequirementsList[i])
                                    @Html.ValidationMessageFor(m => m.RequirementsList[i])
                                </li>
                            }
                            <li>
                                @Html.LabelFor(m => m.PointsCreate)
                                @Html.TextBoxFor(m => m.PointsCreate, new { type = "number" })
                                @Html.ValidationMessageFor(m => m.PointsCreate)
                            </li>
                             <li>
                                @Html.LabelFor(m => m.PointsExplore)
                                @Html.TextBoxFor(m => m.PointsExplore, new { type = "number" })
                                @Html.ValidationMessageFor(m => m.PointsExplore)
                            </li>
                             <li>
                                @Html.LabelFor(m => m.PointsLearn)
                                @Html.TextBoxFor(m => m.PointsLearn, new { type = "number" })
                                @Html.ValidationMessageFor(m => m.PointsLearn)
                            </li>
                             <li>
                                @Html.LabelFor(m => m.PointsSocialize)
                                @Html.TextBoxFor(m => m.PointsSocialize, new { type = "number" })
                                @Html.ValidationMessageFor(m => m.PointsSocialize)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.Type)
                                @Html.DropDownListFor(m => m.Type, JustPressPlay.Utilities.JPPConstants.SelectListFromEnum<JustPressPlay.Utilities.JPPConstants.AchievementTypes>())
                                @Html.ValidationMessageFor(m => m.Type)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.Hidden)
                                @Html.CheckBoxFor(m => m.Hidden)
                                @Html.ValidationMessageFor(m => m.Hidden)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.IsRepeatable)
                                @Html.CheckBoxFor(m => m.IsRepeatable)
                                @Html.ValidationMessageFor(m => m.IsRepeatable)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.RepeatDelayDays)
                                @Html.TextBoxFor(m => m.RepeatDelayDays, new { type = "number" })
                                @Html.ValidationMessageFor(m => m.RepeatDelayDays)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.SelectedCaretakersList)
                                @Html.ListBoxFor(m => m.SelectedCaretakersList, new SelectList(Model.PotentialCaretakersList, "id", "display_name"))
                                @Html.ValidationMessageFor(m => m.SelectedCaretakersList)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.ParentID)
                                @Html.DropDownListFor(m => m.ParentID, new SelectList(Model.ParentAchievements, "id", "title"))
                                @Html.ValidationMessageFor(m => m.ParentID)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.Threshold)
                                @Html.TextBoxFor(m => m.Threshold, new { type = "number" })
                                @Html.ValidationMessageFor(m => m.Threshold)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.ContentType)
                                @Html.DropDownListFor(m => m.ContentType, JustPressPlay.Utilities.JPPConstants.SelectListFromEnum<JustPressPlay.Utilities.JPPConstants.UserSubmissionTypes>())
                                @Html.ValidationMessageFor(m => m.ContentType)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.SystemTriggerType)
                                @Html.DropDownListFor(m => m.SystemTriggerType, JustPressPlay.Utilities.JPPConstants.SelectListFromEnum<JustPressPlay.Utilities.JPPConstants.SystemAchievementTypes>())
                                @Html.ValidationMessageFor(m => m.SystemTriggerType)
                            </li>
                            <li>
                                @Html.LabelFor(m => m.Icon)
								@{ int counter = 0; }
								@foreach (String icon in Model.IconList)
								{
									String label = "icon" + counter;
			
									<span style="float:left; margin:3px;">
										@Html.RadioButtonFor(m => m.Icon, icon, new { id = label })
										<label for="@label"><img width="80px" height="80px" style="background-color:black;" src="@Url.Content(JustPressPlay.Utilities.JPPConstants.Images.IconPath + icon + ".png")" /></label>
									</span>
			
									counter++;
								}
                                @Html.ValidationMessageFor(m => m.Icon)
                            </li>
                        </ol>
                    </fieldset>
                    <input type="submit" value ="Create Achievement" />
                }
            </div>

        </div>

    </div>
</div>

